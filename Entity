package com.example.movieassistant.service;

import com.example.movieassistant.entity.Schedules;
import com.example.movieassistant.exception.ScheduleNotFoundException;
import com.example.movieassistant.repository.ScheduleItemRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ScheduleServiceTest {

    @InjectMocks
    private ScheduleService scheduleService;

    @Mock
    private ScheduleItemRepository scheduleRepository;

    private Schedules sampleSchedule;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        sampleSchedule = new Schedules();
        sampleSchedule.setId(1);
        sampleSchedule.setDate("2025-05-16");
        sampleSchedule.setTime("09:00");
        sampleSchedule.setCast(Arrays.asList("John Doe", "Jane Doe"));
        sampleSchedule.setCrew(Arrays.asList("Crew Member 1", "Crew Member 2"));
    }

    @Test
    void testGetScheduleById_Success() {
        when(scheduleRepository.findById(1)).thenReturn(Optional.of(sampleSchedule));
        Schedules found = scheduleService.getScheduleById(1);
        assertEquals(sampleSchedule.getDate(), found.getDate());
        assertEquals(sampleSchedule.getCast().size(), found.getCast().size());
    }

    @Test
    void testGetScheduleById_NotFound() {
        when(scheduleRepository.findById(2)).thenReturn(Optional.empty());
        assertThrows(ScheduleNotFoundException.class, () -> scheduleService.getScheduleById(2));
    }

    @Test
    void testAddSchedule() {
        when(scheduleRepository.save(any(Schedules.class))).thenReturn(sampleSchedule);
        Schedules saved = scheduleService.addSchedule(sampleSchedule);
        assertNotNull(saved);
        assertEquals("2025-05-16", saved.getDate());
        assertEquals(2, saved.getCrew().size());
    }

    @Test
    void testGetAllSchedules() {
        List<Schedules> schedulesList = Collections.singletonList(sampleSchedule);
        when(scheduleRepository.findAll()).thenReturn(schedulesList);
        List<Schedules> result = scheduleService.getAllSchedules();
        assertFalse(result.isEmpty());
        assertEquals(1, result.size());
    }

    @Test
    void testDeleteSchedule_Success() {
        when(scheduleRepository.findById(1)).thenReturn(Optional.of(sampleSchedule));
        doNothing().when(scheduleRepository).delete(sampleSchedule);

        assertDoesNotThrow(() -> scheduleService.deleteSchedule(1));
        verify(scheduleRepository, times(1)).delete(sampleSchedule);
    }

    @Test
    void testDeleteSchedule_NotFound() {
        when(scheduleRepository.findById(99)).thenReturn(Optional.empty());
        assertThrows(ScheduleNotFoundException.class, () -> scheduleService.deleteSchedule(99));
    }
}
